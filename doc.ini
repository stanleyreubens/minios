# Mini Operating System Simulator - Technical Documentation

## Project Structure
```
minios/
├── include/              # Header files
│   ├── process/         # Process management headers
│   ├── thread/          # Thread management headers
│   ├── resource/        # Resource management headers
│   ├── ipc/            # Inter-process communication headers
│   └── types.hpp        # Common type definitions
├── src/                 # Source files
│   ├── process/         # Process management implementation
│   ├── thread/          # Thread management implementation
│   ├── resource/        # Resource management implementation
│   └── ipc/            # IPC implementation
└── scripts/            # Build and utility scripts
```

## Core Components

### 1. Types and Common Definitions (types.hpp)
```cpp
// Purpose: Central type definitions and enumerations
Key Components:
- ProcessID, ResourceID type definitions
- ProcessState enumeration (NEW, READY, RUNNING, etc.)
- ResourceType enumeration (CPU, MEMORY, FILE, etc.)
- ErrorCode enumeration for error handling
- ProcessStats structure for process statistics

Usage:
- Include this file when you need basic type definitions
- Used throughout the project for consistent type usage
```

### 2. Process Management

#### process.hpp & process.cpp
```cpp
// Purpose: Define and implement process behavior and lifecycle
Key Classes:
- Process: Represents an individual process
  Methods:
  - getPID(): Get process identifier
  - getState()/setState(): State management
  - requestResource()/releaseResource(): Resource handling
  - suspend()/resume(): Process control

Dependencies:
- types.hpp: For type definitions
- resource_manager.hpp: For resource handling
```

#### process_manager.hpp & process_manager.cpp
```cpp
// Purpose: Manage process creation, termination, and scheduling
Key Features:
- Singleton pattern for global process management
- Process creation and termination
- Process scheduling based on priority
- Process state management

Methods:
- createProcess(): Create new process
- terminateProcess(): End process
- scheduleProcesses(): Schedule based on priority
- getProcess(): Retrieve process by ID

Dependencies:
- process.hpp: For process operations
- thread_pool.hpp: For execution
```

### 3. Resource Management

#### resource_manager.hpp & resource_manager.cpp
```cpp
// Purpose: Handle system resources and deadlock detection
Key Features:
- Resource allocation and tracking
- Deadlock detection using cycle detection
- Priority inheritance protocol
- Resource availability monitoring

Methods:
- allocateResource(): Assign resource to process
- releaseResource(): Free resource
- detectDeadlock(): Check for deadlocks
- resolveDeadlock(): Handle detected deadlocks

Dependencies:
- types.hpp: For resource types
- process.hpp: For process interaction
```

### 4. Thread Management

#### thread_pool.hpp & thread_pool.cpp
```cpp
// Purpose: Manage thread creation and task execution
Key Features:
- Fixed-size thread pool
- Task queue management
- Thread synchronization
- Work distribution

Methods:
- enqueue(): Add task to queue
- shutdown(): Clean thread pool
- getActiveThreadCount(): Monitor threads
- pauseExecution()/resumeExecution(): Control execution

Dependencies:
- <thread>: For thread management
- <mutex>: For synchronization
```

### 5. IPC (Inter-Process Communication)

#### shared_memory.hpp & shared_memory.cpp
```cpp
// Purpose: Implement shared memory communication
Key Features:
- Shared memory creation and management
- Memory access synchronization
- Data transfer between processes

Methods:
- write(): Write data to shared memory
- read(): Read data from shared memory
- getSize(): Get memory segment size

Dependencies:
- <mutex>: For synchronization
- types.hpp: For process types
```

#### message_queue.hpp & message_queue.cpp
```cpp
// Purpose: Implement message passing between processes
Key Features:
- Message queue management
- Priority message handling
- FIFO message ordering

Methods:
- send(): Send message to queue
- receive(): Get message from queue
- tryReceive(): Non-blocking receive

Dependencies:
- types.hpp: For message types
- <queue>: For message storage
```

### 6. Synchronization

#### mutex.hpp & mutex.cpp
```cpp
// Purpose: Provide mutex synchronization primitives
Key Features:
- Mutual exclusion implementation
- Lock hierarchy for deadlock prevention
- Timeout functionality

Methods:
- lock()/unlock(): Basic locking
- tryLock(): Non-blocking lock attempt
- tryLockFor(): Timed lock attempt
```

#### semaphore.hpp & semaphore.cpp
```cpp
// Purpose: Implement counting semaphores
Key Features:
- Counter-based synchronization
- Multiple resource access control
- Timeout support

Methods:
- acquire()/release(): Basic operations
- tryAcquire(): Non-blocking acquire
- tryAcquireFor(): Timed acquire
```

### 7. Main Application

#### simulator.hpp & simulator.cpp
```cpp
// Purpose: Main simulator interface and control
Key Features:
- Command processing
- System initialization
- Component coordination
- User interface

Methods:
- initialize(): Setup simulator
- run(): Main loop
- processCommand(): Handle user input
- handleCommands(): Process specific commands

Dependencies:
- All component headers
```

## Build System

### CMakeLists.txt
```cmake
// Purpose: Define build configuration
Key Features:
- Project configuration
- Dependency management
- Build targets
- Installation rules

Components:
- Main executable
- Test executables
- Library targets
```

### scripts/build.sh
```bash
# Purpose: Build automation
Key Features:
- Build directory setup
- CMake configuration
- Compilation
- Installation
```
